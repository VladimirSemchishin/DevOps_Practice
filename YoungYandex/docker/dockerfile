ARG GOARCH=amd64
FROM golang:1.21 AS build
# создаю каталого внутри создаваемого образа - это место назначения по умолчанию
WORKDIR /go/src/catgpt
# pre-copy/cache go.mod для предварительной загрузки зависимостей и их 
# повторной загрузки в последующих сборках только в случае их изменения
COPY go.mod go.sum ./
# этот шаг устанавливает (download) модули go в каталог внутри образа и проверяетс 
# корректность файла go.sum (verify) и самого модуля
# Теперь есть весь инструментарий golang:1.21 и все зависимости Go установленные в образ
RUN go mod download && go mod verify
# копирую исходный код в изображение (./** - взять все файлы, папки и вложенные папки)
COPY ./** .
# Компиляция приложения. 
# Отдельно на самом контейнере в одной из версий ранее я делал сборку приложения вручную:
# Собрал приложение командой go build находясь в диретории со всеми перенесенными файлами
# узнал install path (путь установки) командой go list -f '{{.Target}}' чтобы знать куда 
# go установит текущий пакет, получил в ответ /go/bin/catgpt
# Добавляю каталог установки Go в путь оболочки системы контейнера командой export PATH=$PATH:/go/bin/catgpt 
# таким образом можно запускать исполняемый файл программы, не указывая где он находится
# В качестве альтернативы, если в пути к оболочке уже имеется каталог типа $HOME/bin, и вы хотите 
# установить туда свои программы на языке Go, вы можете изменить цель установки, установив переменную GOBIN 
# с помощью команды go env: go env -w GOBIN=/go/bin/catgpt
# После обновления пути к оболочке выполните команду go install для компиляции и установки пакета.
# Теперь можно запускать исполняемый файл по имени (в моем случае это catgpt) из любой дирректории
# Для проверки я ввел в команд.строку из родительской дирректории catgpt и вышел из процесса так, что при исп 
# команды ps, catgpt показвался как запущенный процесс, чтобы на него вурнуться я исп команду kill -s SIGCONT <PID> && fg
#
# иначе можно сделать командой  go build -v -o /my-project-golang/test2/ ./...
# где:
#     -v флаг который покажет подробности выполненных действий
#     -o указывает место сохранения собранного приложения
#     ./... указывает что нужно собрать и скомпилировать все файлы из текущей директории и всех поддиректорий
#
#
# Но тут важно понимать, что команда должна быть такой: go build -v -o /usr/local/bin/app ./...
# Потому что /usr/local/bin - это каталог в Unix-подобных операционных системах, где обычно располагаются 
# исполняемые файлы, которые доступны для всех пользователей системы. Этот каталог используется для хранения системных утилит 
# и пользовательских программ, которые не установлены в системе по умолчанию. Он позволяет пользователям иметь доступ к своим 
# собственным программам и утилитам, а также к программам, установленным из других источников, таких как пакеты программного 
# обеспечения или скомпилированные исходные коды.
# Тогда собранное и скомпилированное приложение будет доступно в любой директории по имени app
# Но этим сейчас заморачиваться не буду, тк просто запущу приложениие после создания контейнера
#
# CGO_ENABLED=0 отключает возможность компилироваться с CGO (возможность для кода на Go связываться с кодом на C, получать ответы и т.д.) 
# эта возможность не используется
RUN CGO_ENABLED=0 GOARCH=${GOARCH} go build -o /go/bin/catgpt

# Для второго stage использую образ семейства distroless - они построены на debian (как и golang:1.21) но в котором нет практически ничего.
FROM gcr.io/distroless/static-debian12:latest-${GOARCH}
# Копирую бинарник в более легкий образ
COPY --from=build /go/bin/catgpt /
# Открываю порты для http
EXPOSE 8080 9090
# Запуск бинарника после сборки контейнера
CMD [ "/catgpt" ]