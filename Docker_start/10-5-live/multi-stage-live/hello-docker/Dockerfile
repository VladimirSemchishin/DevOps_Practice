# Multi-stage нужен для того, чтобы собрать образ имея все 
# необходимое окружения для работы исполняемого фоайла
# после чего, после сборки уже не нужное окружение для 
# сборки как то сохранить чтобы его использовать в будущем

FROM golang:alpine AS builder 
# берем образ golang с тэгом alpine (то есть в том образе 
# в качестве операционки используется alpine)
# после чего через ключевое слово AS задаем ему метку builder
 
WORKDIR /src 
# указываем рабочую директорию

COPY go.mod
COPY go.sum
# копируем файлы которые необходимы для построения бинарника

RUN go mod download
# скачиваем окружение

COPY main.go
# копируем файл с основным кодом

RUN go build
# билдим в бинарник исходники этого маленького сервера на го

### Тут заракничивается 1 stage и начинается 2 stage
### по этому технология называется Multi-stage

FROM alpine:3.15
# используем еще раз директиву FROM и за основание берем
# самый легковесный образ операционной системы

WORKDIR /app
# переходим в рабочую директорию

COPY --from=builder /src/hello-docker /app/hello-docker
# копируем builder (первой части до Dockerfile, то что было до второго FROM)
# из нее копируем бинарник

ENTRYPOINT ["/app/hello-docker"]
# после чего запускаем, указывая его как точку входа

# Получается что из 1 stage мы скопировали бинарник 
# в самый лекговесный контейнер, в который уже 
# не попало окружение go
